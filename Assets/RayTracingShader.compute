// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Sphere
{
	float3 position;
	float radius;
	float3 albedo;
	float3 specular;
};

// inputs
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4 _DirectionalLight;
float2 _PixelOffset;
StructuredBuffer<Sphere> _Spheres;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.14149265f;

// output
RWTexture2D<float4> Result;






struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}

Ray CreateCameraRay(float2 uv)
{
	// camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// pixel in screen-space to camera space (on plane z = 0)
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	// and to world-space as a vector.
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}


struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
	float3 albedo;
	float3 specular;
};

RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.albedo = float3(0.0f, 0.0f, 0.0f);
	hit.specular = float3(0.0f, 0.0f, 0.0f);
	return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
	// solve ray.origin + t * ray.direction = 0, for y = 0 plane
	float t = -ray.origin.y / ray.direction.y;
	if (t > 0.0f && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0.0f, 1.0f, 0.0f); // up world normal
		bestHit.albedo = float3(0.2f, 0.2f, 0.2f);
		bestHit.specular = float3(0.2f, 0.2f, 0.2f);
	}
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
	if (p2sqr < 0)
		return;

	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0.0f && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.position);
		bestHit.albedo = sphere.albedo;
		bestHit.specular = sphere.specular;
	}
}

RayHit Trace(Ray ray)
{
	RayHit bestHit = CreateRayHit();

	IntersectGroundPlane(ray, bestHit);

	uint numSpheres, stride;
	_Spheres.GetDimensions(numSpheres, stride);
	for (uint i = 0; i < numSpheres; i++)
	{
		IntersectSphere(ray, bestHit, _Spheres[i]);
	}

	return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
	// if hit 
	if ( hit.distance < 1.#INF )
	{
		// Reflect the ray. Small offset along the normal to avoid float precision issues
		// that would block the ray on the surface. Multply energy.
		ray.origin = hit.position + hit.normal * 0.001f;
		ray.direction = reflect(ray.direction, hit.normal); // built in HLSL reflect func.
		ray.energy *= hit.specular;

		// Shadow test ray
		bool shadow = false;
		Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
		RayHit shadowHit = Trace(shadowRay);
		if (shadowHit.distance != 1.#INF)
		{
			return float3(0.0f, 0.0f, 0.0f);
		}

		return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
	}
	else // sky
	{
		// no energy, the sky does not reflect anything.
		ray.energy = 0.0f;

		// direction to spherical coordinates
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		float4 skyColor = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0.0f);
		return skyColor.xyz * 1.5f;
	}
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	Result.GetDimensions( width, height );

	// pixel center from [0,width] to [-1,1]
	float2 uv = float2(((id.xy + _PixelOffset) / float2(width, height)) * 2.0f - 1.0f);

	// get a ray from that screen-space pixel
	Ray ray = CreateCameraRay( uv );

	// Trace and shade
	float3 result = float3( 0, 0, 0 );
	
	for ( int i = 0; i < 8; i++ )
	{
		RayHit hit = Trace(ray);
		result += ray.energy * Shade(ray, hit); // Shade generates the reflect ray and diminishes energy

		if (!any(ray.energy))
			break;
	}
	
	Result[id.xy] = float4(result, 1.0f);
}
